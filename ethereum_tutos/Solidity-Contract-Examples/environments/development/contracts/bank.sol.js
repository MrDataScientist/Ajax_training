// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":false,"inputs":[{"name":"customer","type":"address"}],"name":"withdraw50","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"amount","type":"uint256"}],"name":"refund","outputs":[{"name":"","type":"string"}],"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"customer","type":"address"}],"name":"withdraw20","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"customer","type":"address"}],"name":"withdraw100","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"cashOut","outputs":[],"type":"function"},{"constant":true,"inputs":[{"name":"customer","type":"address"}],"name":"getBalanceOf","outputs":[{"name":"","type":"uint256"}],"type":"function"},{"constant":false,"inputs":[{"name":"customer","type":"address"}],"name":"withdraw5","outputs":[],"type":"function"},{"constant":false,"inputs":[],"name":"mortal","outputs":[],"type":"function"},{"constant":false,"inputs":[{"name":"customer","type":"address"}],"name":"deposit","outputs":[],"type":"function"}],
    binary: "606060405266b1a2bc2ec500006001556702c68af0bb1400006002556706f05b59d3b20000600355670de0b6b3a764000060045561049d806100416000396000f3606060405236156100825760e060020a60003504633218c33f8114610084578063410085df1461010f57806341c0e1b51461018e5780634a8419fd146101b65780635344e3bd14610242578063793cd71e146102ce5780639b96eece146102fb578063a944554b14610320578063f1eae25c146103ac578063f340fa01146103d0575b005b610082600435600354600160a060020a038216600090815260056020526040902054111561010c5780600160a060020a03166000600360005054604051809050600060405180830381858888f19350505050506003600050546005600050600083600160a060020a031681526020019081526020016000206000828282505403925050819055505b50565b6103f560043560243560806040526000606090815230600160a060020a03163182101561046357600160a060020a038316600083608082818181858883f1505060408051808201909152601081527f726566756e642070726f636573736564000000000000000000000000000000006020820152935061049592505050565b61008260005433600160a060020a039081169116141561049b57600054600160a060020a0316ff5b610082600435600254600160a060020a038216600090815260056020526040902054111561010c5780600160a060020a03166000600260005054604051809050600060405180830381858888f19350505050506002600050546005600050600083600160a060020a0316815260200190815260200160002060008282825054039250508190555061010c565b610082600435600454600160a060020a038216600090815260056020526040902054111561010c5780600160a060020a03166000600460005054604051809050600060405180830381858888f19350505050506004600050546005600050600083600160a060020a0316815260200190815260200160002060008282825054039250508190555061010c565b61008260008054600160a060020a0390811691906002309091163104606082818181858883f15050505050565b600160a060020a03600435166000908152600560205260409020546060908152602090f35b610082600435600154600160a060020a038216600090815260056020526040902054111561010c5780600160a060020a03166000600160005054604051809050600060405180830381858888f19350505050506001600050546005600050600083600160a060020a0316815260200190815260200160002060008282825054039250508190555061010c565b6100826000805473ffffffffffffffffffffffffffffffffffffffff191633179055565b600160a060020a03600435166000908152600560205260409020805434019055610082565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156104555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b5060c0604052601760809081527f526566756e6420616d6f756e7420746f6f206c6172676500000000000000000060a0525b92915050565b56",
    unlinked_binary: "606060405266b1a2bc2ec500006001556702c68af0bb1400006002556706f05b59d3b20000600355670de0b6b3a764000060045561049d806100416000396000f3606060405236156100825760e060020a60003504633218c33f8114610084578063410085df1461010f57806341c0e1b51461018e5780634a8419fd146101b65780635344e3bd14610242578063793cd71e146102ce5780639b96eece146102fb578063a944554b14610320578063f1eae25c146103ac578063f340fa01146103d0575b005b610082600435600354600160a060020a038216600090815260056020526040902054111561010c5780600160a060020a03166000600360005054604051809050600060405180830381858888f19350505050506003600050546005600050600083600160a060020a031681526020019081526020016000206000828282505403925050819055505b50565b6103f560043560243560806040526000606090815230600160a060020a03163182101561046357600160a060020a038316600083608082818181858883f1505060408051808201909152601081527f726566756e642070726f636573736564000000000000000000000000000000006020820152935061049592505050565b61008260005433600160a060020a039081169116141561049b57600054600160a060020a0316ff5b610082600435600254600160a060020a038216600090815260056020526040902054111561010c5780600160a060020a03166000600260005054604051809050600060405180830381858888f19350505050506002600050546005600050600083600160a060020a0316815260200190815260200160002060008282825054039250508190555061010c565b610082600435600454600160a060020a038216600090815260056020526040902054111561010c5780600160a060020a03166000600460005054604051809050600060405180830381858888f19350505050506004600050546005600050600083600160a060020a0316815260200190815260200160002060008282825054039250508190555061010c565b61008260008054600160a060020a0390811691906002309091163104606082818181858883f15050505050565b600160a060020a03600435166000908152600560205260409020546060908152602090f35b610082600435600154600160a060020a038216600090815260056020526040902054111561010c5780600160a060020a03166000600160005054604051809050600060405180830381858888f19350505050506001600050546005600050600083600160a060020a0316815260200190815260200160002060008282825054039250508190555061010c565b6100826000805473ffffffffffffffffffffffffffffffffffffffff191633179055565b600160a060020a03600435166000908152600560205260409020805434019055610082565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600f02600301f150905090810190601f1680156104555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b5060c0604052601760809081527f526566756e6420616d6f756e7420746f6f206c6172676500000000000000000060a0525b92915050565b56",
    address: "",
    generated_with: "2.0.9",
    contract_name: "bank"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("bank error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("bank error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("bank error: Please call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("bank error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.bank = Contract;
  }

})();
